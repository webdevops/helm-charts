# -- String to partially override fullname template (will maintain the release name)
nameOverride: ""

# -- String to fully override fullname template
fullnameOverride: ""

namespaceOverride: ""

image:
  registry: docker.io
  repository: webdevops/pagerduty-exporter
  tag: ""
  pullPolicy: IfNotPresent

replicas: 1
minReadySeconds: 10
terminationGracePeriodSeconds: 60

env: {}
  # DEBUG: "true"
  # VERBOSE: "true"

extraEnv: []
  # - name: REDIS_PASSWORD
  #   valueFrom:
  #     secretKeyRef:
  #       key: redis-password
  #       name: redis-config-0.0.2

secretsEnableTemplateFunctions: false
secrets: {}
# secretName: secretValue

resources:
  limits:
    cpu: 500m
    memory: 150Mi
  requests:
    cpu: 100m
    memory: 150Mi

nodeSelector:
  kubernetes.io/os: linux

affinity: {}
tolerations: []

restartPolicy: Always
priorityClassName: ""

config: ""

startupProbe:
  tcpSocket:
    port: http-metrics
  initialDelaySeconds: 15
  periodSeconds: 10
  failureThreshold: 5
livenessProbe:
  tcpSocket:
    port: http-metrics
  initialDelaySeconds: 15
  periodSeconds: 30
  failureThreshold: 5
readinessProbe:
  tcpSocket:
    port: http-metrics
  initialDelaySeconds: 15
  periodSeconds: 30
  failureThreshold: 5

serviceAccount:
  create: true
  name: pagerduty-exporter
  labels: {}
  annotations: {}

## Customize the strategy if set
strategy: {}

podLabels: {}
podAnnotations: {}

securityContext:
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000
  supplementalGroups: [1000]
  runAsNonRoot: true
  seccompProfile:
    type: RuntimeDefault

containerSecurityContext:
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  allowPrivilegeEscalation: false
  capabilities:
    drop: ["ALL"]

# -- registry secret names as an array
imagePullSecrets: []

service:
  type: ClusterIP
  port: 8080
  targetPort: 8080
  appProtocol: http
  nodePort:
  portName: http-metrics
  annotations: {}
  labels: {}

netpol:
  enabled: true
  policyTypes:
    - Ingress
    - Egress
  ingress: []
  egress:
    # DNS
    - ports:
      - port: 53
        protocol: TCP
    - ports:
      - port: 53
        protocol: UDP
    # HTTPS (Pagerduty REST api)
    - ports:
      - port: 443
        protocol: TCP

prometheus:
  monitor:
    enabled: false

    jobLabel: ""

    scheme: http
    basicAuth: {}
    bearerTokenFile:
    tlsConfig: {}

    ## proxyUrl: URL of a proxy that should be used for scraping.
    ##
    proxyUrl: ""

    relabelings: []
    metricRelabelings: []
    interval: ""
    scrapeTimeout: ""

    ## SampleLimit defines per-scrape limit on number of scraped samples that will be accepted.
    ##
    sampleLimit: 0

    ## TargetLimit defines a limit on the number of scraped targets that will be accepted.
    ##
    targetLimit: 0

    ## Per-scrape limit on number of labels that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.
    ##
    labelLimit: 0

    ## Per-scrape limit on length of labels name that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.
    ##
    labelNameLengthLimit: 0

    ## Per-scrape limit on length of labels value that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.
    ##
    labelValueLengthLimit: 0

global:
  imagePullSecrets: []
